/* This file was generated by SableCC (http://www.sablecc.org/). */

package musicseeder.analysis;

import java.util.*;

import musicseeder.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseASong(ASong node)
    {
        defaultCase(node);
    }

    public void caseAPart(APart node)
    {
        defaultCase(node);
    }

    public void caseAChord(AChord node)
    {
        defaultCase(node);
    }

    public void caseAAllNoteFunction(AAllNoteFunction node)
    {
        defaultCase(node);
    }

    public void caseATonikaFunction(ATonikaFunction node)
    {
        defaultCase(node);
    }

    public void caseASubdominantFunction(ASubdominantFunction node)
    {
        defaultCase(node);
    }

    public void caseADominantFunction(ADominantFunction node)
    {
        defaultCase(node);
    }

    public void caseATonikaParFunction(ATonikaParFunction node)
    {
        defaultCase(node);
    }

    public void caseASubdominantParFunction(ASubdominantParFunction node)
    {
        defaultCase(node);
    }

    public void caseADominantParFunction(ADominantParFunction node)
    {
        defaultCase(node);
    }

    public void caseAMelody(AMelody node)
    {
        defaultCase(node);
    }

    public void caseASingleNote(ASingleNote node)
    {
        defaultCase(node);
    }

    public void caseASplitNote(ASplitNote node)
    {
        defaultCase(node);
    }

    public void caseAParallelNote(AParallelNote node)
    {
        defaultCase(node);
    }

    public void caseAStraightDivision(AStraightDivision node)
    {
        defaultCase(node);
    }

    public void caseAPunktureDivision(APunktureDivision node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
